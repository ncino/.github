name: {{REPLACE_REPO_NAME}} 1GP CI build
on:
  push:
    branches:
      - release

  pull_request:
    branches:
      - release

  workflow_dispatch:
    inputs:
      CLEAN_ORG:
        description: 'CLEAN_ORG - Input "true" to spin up a fresh org instead of pulling from orgfarm'
        required: false
        type: boolean
        default: false
      PRESERVE_ORG:
        description: 'PRESERVE_ORG - Input "true" to preserve the org after the workflow completes. Auth Information is stored in the build artifacts.'
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      config-path:
        required: true
        type: string

concurrency:
    group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
    cancel-in-progress: true

permissions:
  id-token: write # This is required for requesting the ID token for AWS actions
  contents: read  # This is required for actions/checkout

env:
    BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    COMMIT_SHA1: "${{ github.sha }}"
    DD_AGENT_MAJOR_VERSION: "7"
    DD_API_KEY: "${{ REPLACE_DD_API_SECRET }}"
    DD_APP_KEY: "${{ REPLACE_DD_APP_SECRET }}"
    DD_SITE: "datadoghq.com"
    DEVOPS_SCRIPTS_PATH: "./devops-utility-belt/scripts"
    DX_DELETE_SCRATCH_ORG: true
    ENABLE_LINTING: "false"
    GIT_BASE_BRANCH: "${{ github.base_ref }}"
    GIT_BRANCH: "${{ github.ref_name }}"
    GITHUB_TOKEN: "${{REPLACE_TOKEN_SECRET}}"
    REPO_NAME: "${{ github.event.repository.name }}"

jobs:
    CI-build-and-test:
        runs-on: ubuntu-latest
        defaults:
          run:
              shell: bash
        steps:
        # 🎬 Install Phase 🎬
        - name: Create necessary directories
          run: mkdir /tmp/testResults/

        - name: 🫥 Checkout {{REPLACE_REPO_NAME}} 😐
          uses: actions/checkout@v3
          with:
            token: "${{REPLACE_TOKEN_SECRET}}"

        - name: 🐳 Get DevOps Scripts 🐳
          uses: actions/checkout@v3
          with:            
            token: "${{REPLACE_TOKEN_SECRET}}"
            repository: "ncino/devops-utility-belt"
            path: "devops-utility-belt"

        - name: 🐍 Setup Python 🐍
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'
            cache: 'pip'
            cache-dependency-path: |
              devops-utility-belt/Pipfile.lock

        - name: 🪄 Install python repos 🧌
          run: $DEVOPS_SCRIPTS_PATH/install_python_repos.sh

        - name: 📇 Configure .npmrc file 📜
          run: $DEVOPS_SCRIPTS_PATH/npm_auth.sh

        - name: 🍣 Setup Node 👌
          uses: actions/setup-node@v3
          with:
            node-version-file: '.nvmrc'
            cache: 'npm'

        - name: ☁️ Install SFDX and authenticate ☁️
          run: $DEVOPS_SCRIPTS_PATH/install_sfdx_and_auth.sh
          env:
            DEV_HUB_AUTH_URL: ${{REPLACE_DEV_HUB_SECRET}}

        - name: 👩‍🚀 Setup Log exports 👩‍🚀
          run: source $DEVOPS_SCRIPTS_PATH/sfdx_and_node_version_export.sh

        - name: 👍 Install Node Packages 👍
          run: npm ci --unsafe-perm

        # 🥩🥔 Build Phase 🥩🥔
        - name: 👩‍🔬 Confirms proper xml syntax for files under config/ 👨‍🏫
          run: |
            sudo apt-get update && sudo apt-get install libxml2-utils
            find config -name '*.xml' -print0 | xargs -0 -n1 -r xmllint --noout

        # Uncomment once tests have been applied
        # - name: 🧑‍🎤 Run npm test:unit script 👩‍🎤
        #   run: npm run test:unit

        - name: 👷‍♀️ Validate destructive changes 👷‍♀️
          run: $DEVOPS_SCRIPTS_PATH/validate_destructive_changes.sh $COMMIT_SHA1

        - name: 👩‍🌾 Get orgfarm org 👨‍🌾
          run: orgfarm-request -c "$REPO_NAME"
          env:
            ORG_FARM_API_KEY: "${{REPLACE_ORGFARM_KEY_SECRET}}"
            ORGFARM_API_URL: "${{REPLACE_ORGFARM_URL_SECRET}}"

        - name: 🤠 Display Org 🔎
          run: $DEVOPS_SCRIPTS_PATH/display_org.sh

        - name: 🗣️ Run predependency script if org was created locally
          run: |
            if [[ -f /tmp/create_dx_local_check.txt ]] && [[ -f ./scripts/org_farm/pre_dependencies.sh ]]; then
                ./scripts/org_farm/pre_dependencies.sh
            fi

        - name: 📦 Update SF package dependencies 📦
          run: sfupdate

        - name: 🚢 Deploy source 🚢
          run: $DEVOPS_SCRIPTS_PATH/sfdx_source_push.sh

        - name: 💼 Run sfencrypt if org created locally 💼
          run: sfencrypt

        - name: 🤞 Run Apex unit tests 🤞
          run: sfdxunittests -s src -o /tmp/testResults/junit.xml

        # 🧹 Post-Build Cleanup Phase 🧹
        - name: 💀 Delete the dx scratch org 💀
          if: inputs.PRESERVE_ORG == false && always()
          run: $DEVOPS_SCRIPTS_PATH/delete_scratch_org.sh

        # 🏁 Artifact Upload Phase 🏁
        - name: 🧟‍♀️ Archive unit test artifacts 👩‍🚀
          uses: actions/upload-artifact@v3
          with:
            name: Unit Test Files
            path: /tmp/testResults/*

        - name: 📩 Upload Scratch Org Authentication Information 📨
          uses: actions/upload-artifact@v3
          with: 
            name: Scratch Org Authentication Information
            path: auth.key

        - name: 🤙 Upload Artifact and trigger packaging 🏄‍♂️
          if: github.ref_name == 'release'
          uses: ncino/action-aws/s3_trigger_pipeline@v2

        - name: 👏 Success Message 👏
          run: cat $DEVOPS_SCRIPTS_PATH/config/deploy_message.txt
